//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace E2BizzEventManagementSystem.Model
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EventManagementEntities : DbContext
    {
        public EventManagementEntities()
            : base("name=EventManagementEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Event> Events { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual ObjectResult<GetAllEmployees_Result> GetAllEmployees()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployees_Result>("GetAllEmployees");
        }
    
        public virtual ObjectResult<GetAllEvents_Result> GetAllEvents()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEvents_Result>("GetAllEvents");
        }
    
        public virtual ObjectResult<GetEmployeeDetails_Result> GetEmployeeDetails(Nullable<int> p_EmployeeId)
        {
            var p_EmployeeIdParameter = p_EmployeeId.HasValue ?
                new ObjectParameter("p_EmployeeId", p_EmployeeId) :
                new ObjectParameter("p_EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetails_Result>("GetEmployeeDetails", p_EmployeeIdParameter);
        }
    
        public virtual ObjectResult<GetEventDetails_Result> GetEventDetails(Nullable<int> p_EventId)
        {
            var p_EventIdParameter = p_EventId.HasValue ?
                new ObjectParameter("p_EventId", p_EventId) :
                new ObjectParameter("p_EventId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEventDetails_Result>("GetEventDetails", p_EventIdParameter);
        }
    
        public virtual ObjectResult<AuthenticateUser_Result> AuthenticateUser(string p_Email, string p_Password)
        {
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("p_Password", p_Password) :
                new ObjectParameter("p_Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AuthenticateUser_Result>("AuthenticateUser", p_EmailParameter, p_PasswordParameter);
        }
    
        public virtual ObjectResult<GetAllRoles_Result> GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllRoles_Result>("GetAllRoles");
        }
    
        public virtual ObjectResult<string> GetUserRole(string p_Email, string p_Password)
        {
            var p_EmailParameter = p_Email != null ?
                new ObjectParameter("p_Email", p_Email) :
                new ObjectParameter("p_Email", typeof(string));
    
            var p_PasswordParameter = p_Password != null ?
                new ObjectParameter("p_Password", p_Password) :
                new ObjectParameter("p_Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetUserRole", p_EmailParameter, p_PasswordParameter);
        }
    }
}
